<?php
/**
 * @file
 * Provides configurable blocks of menu items.
 */

/**
 * Denotes that the tree should use the menu picked by the curent page.
 */
define('MENU_TREE__CURRENT_PAGE_MENU', '_active');

// Off-load the following infrequently called hooks to another file.
function menu_block_block_info() {
  module_load_include('inc', 'menu_block', 'menu_block.admin');
  return _menu_block_block_info();
}
function menu_block_block_configure($delta = '', $settings = array()) {
  module_load_include('inc', 'menu_block', 'menu_block.admin');
  return _menu_block_block_configure($delta, $settings);
}

/**
 * Implements hook_menu().
 */
function menu_block_menu() {
  $items['admin/config/user-interface/menu-block'] = array(
    'title' => 'Menu block',
    'description' => 'Configure menu block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_block_admin_settings_form'),
    'access callback' => 'menu_block_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'menu_block.admin.inc',
  );
  return $items;
}

/**
 * Determine whether the user has permission to use menu_block module.
 */
function menu_block_access($account = NULL) {
  return user_access('administer blocks', $account) && user_access('administer menu', $account);
}

/**
 * Implements hook_menu_alter().
 */
function menu_block_menu_alter(&$items) {
  // Fake the necessary menu attributes necessary for a contextual link.
  $items['admin/content/book/%node']['title'] = 'Edit book outline';
  $items['admin/content/book/%node']['type'] = MENU_LOCAL_TASK;
  $items['admin/content/book/%node']['context'] = (MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE);
  $items['admin/content/book/%node']['tab_root'] = 'admin/content/book';
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function menu_block_ctools_plugin_directory($module, $plugin) {
  if ($plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_block_info().
 *
 * @see ctools_block_content_type_content_types().
 */
function menu_block_ctools_block_info($module, $delta, &$info) {
  $info['icon'] = 'icon_contrib_menu.png';
  $info['category'] = t('Menus');
}

/**
 * Implements hook_theme().
 */
function menu_block_theme(&$existing, $type, $theme, $path) {
  // Add theme hook suggestion patterns for the core theme functions used in
  // this module. We can't add them during hook_theme_registry_alter() because
  // we will already have missed the opportunity for the theme engine's
  // theme_hook() to process the pattern. And we can't run the pattern ourselves
  // because we aren't given the type, theme and path in that hook.
  $existing['menu_tree']['pattern'] = 'menu_tree__';
  $existing['menu_link']['pattern'] = 'menu_link__';

  return array(
    'menu_block_wrapper' => array(
      'template' => 'menu-block-wrapper',
      'variables' => array('content' => array(), 'config' => array(), 'delta' => NULL),
      'pattern' => 'menu_block_wrapper__',
    ),
    'menu_block_menu_order' => array(
      'render element' => 'element',
      'file' => 'menu_block.admin.inc',
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function menu_block_block_view($delta = '', $settings = array(), $contexts = array()) {
  //$config = menu_block_get_config($delta, $settings);
  // Split out the 'parent' item into 'menu_name' and 'parent_mlid'.
  if (!isset($settings['menu_name']) || !isset($settings['parent_mlid'])) {
    list($settings['menu_name'], $settings['parent_mlid']) = explode(':', $settings['parent']);
  }
  $settings['delta'] = $delta;
  //dpm($settings);
  ////dpm($config);
  return menu_tree_build($settings);
}

/**
 * Implements hook_block_view_alter().
 */
function menu_block_block_view_alter(&$data, $block) {
  // Add contextual links for menu blocks.
  if ($block->module == 'menu_block' && !empty($data['content']['#config'])) {
    $menu_name = $data['content']['#config']['menu_name'];
    if (in_array($menu_name, array_keys(menu_get_menus()))) {
      $data['content']['#contextual_links']['menu_block'] = array('admin/structure/menu/manage', array($menu_name));
    }
    elseif (strpos($menu_name, 'book-toc-') === 0) {
      $node = str_replace('book-toc-', '', $menu_name);
      $data['content']['#contextual_links']['menu_block'] = array('admin/content/book', array($node));
    }
  }
}

/**
 * Process variables for menu-block-wrapper.tpl.php.
 *
 * @see menu-block-wrapper.tpl.php
 */
function template_preprocess_menu_block_wrapper(&$variables) {
  $variables['classes_array'][] = 'menu-block-' . $variables['delta'];
  $variables['classes_array'][] = 'menu-name-' . $variables['config']['menu_name'];
  $variables['classes_array'][] = 'parent-mlid-' . menu_block_clean_css_identifier($variables['config']['parent_mlid']);
  $variables['classes_array'][] = 'menu-level-' . $variables['config']['level'];
}

/**
 * A copy of drupal_clean_css_identifier() that cleans up colon characters.
 */
function menu_block_clean_css_identifier($identifier, $filter = array(' ' => '-', '_' => '-', '/' => '-', '[' => '-', ']' => '', ':' => '-')) {
  return backdrop_clean_css_identifier($identifier, $filter);
}

/**
 * Returns a list of menu names implemented by all modules.
 *
 * @return array
 *   An array of menu titles keyed by menu machine name.
 */
function menu_block_get_all_menus() {
  $all_menus = &drupal_static(__FUNCTION__);

  if (!$all_menus) {
    $cid = 'menu_block_menus:' . $GLOBALS['language']->langcode;
    if ($cached = cache_get($cid, 'cache_menu')) {
      $all_menus = $cached->data;
    }
    else {
      // Retrieve core's menus.
      $all_menus = menu_get_menus();
      // Retrieve all the menu names provided by hook_menu_block_get_menus().
      $all_menus = array_merge($all_menus, module_invoke_all('menu_block_get_menus'));
      asort($all_menus);
      // Add an option to use the menu for the active menu item.
      $all_menus = array(MENU_TREE__CURRENT_PAGE_MENU => '<' . t('the menu selected by the page') . '>') + $all_menus;
      cache_set($cid, $all_menus, 'cache_menu');
    }
  }

  return $all_menus;
}

/**
 * The default menu block configuration.
 *
 * @return array
 */
function menu_block_default_config() {
  return array(
    'parent' => 'main-menu:0',
    'title_link' => 0,
    'admin_title' => '',
    'level' => 1,
    'follow' => 0,
    'depth' => 0,
    'expanded' => 0,
    'sort' => 0,
    'menu_name' => 'main-menu',
    'parent_mlid' => 0,
  );
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param string $delta
 *   The delta that uniquely identifies the block in the block system. If
 *   not specified, the default configuration will be returned.
 *   This is deprecated. Use menu_block_default_config() instead.
 *
 * @return array
 *   An associated array of configuration options.
 *
 * @see menu_block_default_config()
 */
function menu_block_get_config($delta = NULL, $settings = NULL) {
  static $defaults;
  if (!isset($defaults)) {
    $defaults = menu_block_default_config();
////dpm($defaults);
  }

  if (!$settings) {
    $settings = menu_block_default_config();
    $settings['uniqid'] = uniqid();
  }
////dpm($settings);

  if (!isset($delta)) {
    return $defaults;
  }

  $configs = &drupal_static(__FUNCTION__, array());
  if (!isset($configs[$delta])) {
    $config = array();

    // Add in variable overrides and defaults.
    foreach ($defaults as $key => $default) {
      $override = $settings[$key];
      if (isset($override)) {
        $config[$key] = $override;
      }
      elseif (!isset($config[$key])) {
        $config[$key] = $default;
      }
    }

    // Split out the 'parent' item into 'menu_name' and 'parent_mlid'.
    if (!isset($config['menu_name']) && !isset($config['parent_mlid'])) {
      list($config['menu_name'], $config['parent_mlid']) = explode(':', $config['parent']);
    }

    $config['delta'] = $delta;
    $config['uniqid'] = $settings['uniqid'];
    $configs[$settings['uniqid']] = $config;
  }
////dpm($configs);

  return $configs[$settings['uniqid']];
}

/**
 * Gets the data structure representing a menu tree for the given configuration.
 *
 * @param array $config
 *   See the $config param of menu_tree_build().
 *
 * @return array
 */
function menu_tree_block_data(array &$config) {
  // Determine the max depth based on level and depth setting.
  $max_depth = ($config['depth'] == 0) ? NULL : min($config['level'] + $config['depth'] - 1, MENU_MAX_DEPTH);

  if ($config['expanded'] || $config['parent_mlid']) {
    // Get the full, un-pruned tree.
    if ($config['parent_mlid']) {
      $tree = menu_tree_all_data($config['menu_name']);
    }
    else {
      $tree = menu_tree_all_data($config['menu_name'], NULL, $max_depth);
    }
    // And add the active trail data back to the full tree.
    menu_tree_add_active_path($tree);
  }
  else {
    // Get the tree pruned for just the active trail.
    $tree = menu_tree_page_data($config['menu_name'], $max_depth);
  }

  // Allow alteration of the tree and config before we begin operations on it.
  drupal_alter('menu_block_tree', $tree, $config);

  // Localize the tree.
  if (module_exists('i18n_menu')) {
    $tree = i18n_menu_localize_tree($tree);
  }

  // Prune the tree along the active trail to the specified level.
  if ($config['level'] > 1 || $config['parent_mlid']) {
    if ($config['parent_mlid']) {
      $parent_item = menu_link_load($config['parent_mlid']);
      menu_tree_prune_tree($tree, $config['level'], $parent_item);
    }
    else {
      menu_tree_prune_tree($tree, $config['level']);
    }
  }

  // Prune the tree to the active menu item.
  if ($config['follow']) {
    menu_tree_prune_active_tree($tree, $config['follow']);
  }

  // If the menu-item-based tree is not "expanded", trim the tree to the active path.
  if ($config['parent_mlid'] && !$config['expanded']) {
    menu_tree_trim_active_path($tree);
  }

  // Trim the branches that extend beyond the specified depth.
  if ($config['depth'] > 0) {
    menu_tree_depth_trim($tree, $config['depth']);
  }

  // Sort the active path to the top of the tree.
  if ($config['sort']) {
    menu_tree_sort_active_path($tree);
  }

  return $tree;
}

/**
 * Returns the current page's menu.
 *
 * @return string|bool
 *   The current page's menu, or FALSE if no menu applied.
 */
function menu_block_get_current_page_menu() {
  // Retrieve the list of available menus.
  $menu_order = config_get('menu_block.settings', 'menu_block_menu_order');

  // Check for regular expressions as menu keys.
  $patterns = array();
  foreach (array_keys($menu_order) as $pattern) {
    if ($pattern[0] == '/') {
      $patterns[$pattern] = NULL;
    }
  }

  // Extract the "current" path from the request, or from the active menu
  // trail if applicable.
  $link_path = $_GET['q'] ? $_GET['q'] : '<front>';
  $trail = menu_get_active_trail();
  $last_item = end($trail);
  if (!empty($last_item['link_path'])) {
    $link_path = $last_item['link_path'];
  }

  // Retrieve all the menus containing a link to the current page.
  $result = db_query("SELECT menu_name FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $link_path));
  foreach ($result as $item) {
    // Check if the menu is in the list of available menus.
    if (isset($menu_order[$item->menu_name])) {
      // Mark the menu.
      $menu_order[$item->menu_name] = MENU_TREE__CURRENT_PAGE_MENU;
    }
    else {
      // Check if the menu matches one of the available patterns.
      foreach (array_keys($patterns) as $pattern) {
        if (preg_match($pattern, $item->menu_name)) {
          // Mark the menu.
          $menu_order[$pattern] = MENU_TREE__CURRENT_PAGE_MENU;
          // Store the actual menu name.
          $patterns[$pattern] = $item->menu_name;
        }
      }
    }
  }
  // Find the first marked menu.
  $menu_name = array_search(MENU_TREE__CURRENT_PAGE_MENU, $menu_order);
  // If a pattern was matched, use the actual menu name instead of the pattern.
  if (!empty($patterns[$menu_name])) {
    $menu_name = $patterns[$menu_name];
  }

  return $menu_name;
}

/**
 * Build a menu tree based on the provided configuration.
 *
 * @param array $config
 *   An array of configuration options that specifies how to build the
 *   menu tree and its title.
 *   - delta: (string) The menu_block's block delta.
 *   - menu_name: (string) The machine name of the requested menu. Can also be
 *     set to MENU_TREE__CURRENT_PAGE_MENU to use the menu selected by the page.
 *   - parent_mlid: (int) The mlid of the item that should root the tree. Use 0
 *     to use the menu's root.
 *   - title_link: (boolean) Specifies if the title should be rendered as a link
 *     or a simple string.
 *   - admin_title: (string) An optional title to uniquely identify the block on
 *     the administer blocks page.
 *   - level: (int) The starting level of the tree.
 *   - follow: (string) Specifies if the starting level should follow the
 *     active menu item. Should be set to 0, 'active' or 'child'.
 *   - depth: (int) The maximum depth the tree should contain, relative to the
 *     starting level.
 *   - expanded: (boolean) Specifies if the entire tree be expanded or not.
 *   - sort: (boolean) Specifies if the tree should be sorted with the active
 *     trail at the top of the tree.
 *
 * @return array
 *   An associative array containing several pieces of data.
 *   - content: The tree as a renderable array.
 *   - subject: The title rendered as HTML.
 *   - subject_array: The title as a renderable array.
 */
function menu_tree_build(array &$config) {
  // Retrieve the active menu item from the database.
  if ($config['menu_name'] == MENU_TREE__CURRENT_PAGE_MENU) {
    $config['menu_name'] = menu_block_get_current_page_menu();
    $config['parent_mlid'] = 0;

    // If no menu link was found, don't display the block.
    if (empty($config['menu_name'])) {
      return array(
        'subject' => t('The menu selected by the page'),
        'subject_array' => array(),
        'content' => array(),
      );
    }
  }

  // Get the default block name.
  drupal_static_reset('menu_block_set_title');
  $menu_names = menu_block_get_all_menus();
  menu_block_set_title($menu_names[$config['menu_name']]);

  // Get the raw menu tree data.
  $tree = menu_tree_block_data($config);
  $title = menu_block_get_title($config['title_link']);
  // Create a renderable tree.
  $data = array();
  $data['subject_array'] = $title;
  $data['subject'] = $title;
//dpm($data['subject']);
  $data['content'] = array();
  if (!empty($tree) && $output = menu_block_tree_output($tree, $config)) {
    $data['content']['#content'] = $output;
    $data['content']['#theme'] = array(
      'menu_block_wrapper__' . str_replace('-', '_', $config['delta']),
      'menu_block_wrapper__' . str_replace('-', '_', $config['menu_name']),
      'menu_block_wrapper'
    );
    $data['content']['#config'] = $config;
    $data['content']['#delta'] = $config['delta'];
  }

  return $data;
}

/**
 * Retrieves the menu item to use for the tree's title.
 *
 * @param bool $render_title_as_link
 *   boolean A boolean that says whether to render the title as a link or a
 *   simple string.
 *
 * @return array|string
 *   A render array or string containing the tree's title.
 */
function menu_block_get_title($render_title_as_link = TRUE) {
  $menu_item = menu_block_set_title();

  if (is_string($menu_item)) {
    // The tree's title is a menu title, a normal string.
    $title = check_plain($menu_item);
  }
  // The tree's title is a menu item.
  else {
    $title = check_plain($menu_item['title']);
  }
  return $title;
}

/**
 * Sets the menu item to use for the tree's title.
 *
 * @param array|string $item
 *   The menu item (an array) or the menu item's title as a string.
 *
 * @return array|string
 *   The saved title value.
 */
function menu_block_set_title($item = NULL) {
  $menu_item = &drupal_static(__FUNCTION__, '');

  // Save the menu item.
  if (!is_null($item)) {
    $menu_item = $item;
  }

  return $menu_item;
}

/**
 * Add the active trail indicators into the tree.
 *
 * The data returned by menu_tree_page_data() has link['in_active_trail'] set to
 * TRUE for each menu item in the active trail. The data returned from
 * menu_tree_all_data() does not contain the active trail indicators. This is a
 * helper function that adds it back in.
 *
 * @param array $tree
 *   The menu tree.
 */
function menu_tree_add_active_path(array &$tree) {
  // Grab any menu item to find the menu_name for this tree.
  $menu_item = current($tree);
  $tree_with_trail = menu_tree_page_data($menu_item['link']['menu_name']);

  // To traverse the original tree down the active trail, we use a pointer.
  $subtree_pointer =& $tree;

  // Find each key in the active trail.
  while ($tree_with_trail) {
    foreach ($tree_with_trail as $key => &$value) {
      if ($tree_with_trail[$key]['link']['in_active_trail'] && isset($subtree_pointer[$key])) {
        // Set the active trail info in the original tree.
        $subtree_pointer[$key]['link']['in_active_trail'] = TRUE;
        // Continue in the subtree, if it exists.
        $tree_with_trail =& $tree_with_trail[$key]['below'];
        $subtree_pointer =& $subtree_pointer[$key]['below'];
        break;
      }
      else {
        unset($tree_with_trail[$key]);
      }
    }
  }
}

/**
 * Trim everything but the active trail in the tree.
 *
 * @param array $tree
 *   The menu tree to trim.
 */
function menu_tree_trim_active_path(array &$tree) {
  foreach ($tree as $key => &$value) {
    if (($tree[$key]['link']['in_active_trail'] || $tree[$key]['link']['expanded']) && $tree[$key]['below']) {
      // Continue in the subtree, if it exists.
      menu_tree_trim_active_path($tree[$key]['below']);
    }
    else {
      // Trim anything not expanded or along the active trail.
      $tree[$key]['below'] = FALSE;
    }
  }
}

/**
 * Sort the active trail to the top of the tree.
 *
 * @param array $tree
 *   array The menu tree to sort.
 */
function menu_tree_sort_active_path(array &$tree) {
  // To traverse the original tree down the active trail, we use a pointer.
  $current_level =& $tree;

  // Traverse the tree along the active trail.
  do {
    $next_level = $sort = $first_key = FALSE;
    foreach ($current_level as $key => &$value) {
      // Save the first key for later use.
      if (!$first_key) {
        $first_key = $key;
      }
      if ($current_level[$key]['link']['in_active_trail'] && $current_level[$key]['below']) {
        // Don't re-sort if its already sorted.
        if ($key != $first_key) {
          // Create a new key that will come before the first key.
          list($first_key, ) = explode(' ', $first_key);
          $first_key--;
          list(, $new_key) = explode(' ', $key, 2);
          $new_key = "$first_key $new_key";
          // Move the item to the new key.
          $current_level[$new_key] = $current_level[$key];
          unset($current_level[$key]);
          $key = $new_key;
          $sort = TRUE; // Flag sorting.
        }
        $next_level = $key; // Flag subtree.
        break;
      }
    }
    // Sort this level.
    if ($sort) {
      ksort($current_level);
    }
    // Continue in the subtree, if it exists.
    if ($next_level) {
      $current_level =& $current_level[$next_level]['below'];
    }
  } while ($next_level);
}

/**
 * Prune a tree so that it begins at the specified level.
 *
 * This function will follow the active menu trail to the specified level.
 *
 * @param array $tree
 *   The menu tree to prune.
 * @param int $level
 *   The level of the original tree that will start the pruned tree.
 * @param array $parent_item
 *   The menu item that should be used as the root of the tree.
 */
function menu_tree_prune_tree(array &$tree, $level, array $parent_item = NULL) {
  if (!empty($parent_item)) {
    // Prune the tree along the path to the menu item.
    for ($i = 1; $i <= MENU_MAX_DEPTH && $parent_item["p$i"] != '0'; $i++) {
      $plid = $parent_item["p$i"];
      $found_active_trail = FALSE;
      // Examine each element at this level for the ancestor.
      foreach ($tree as $key => &$value) {
        if ($tree[$key]['link']['mlid'] == $plid) {
          menu_block_set_title($tree[$key]['link']);
          // Prune the tree to the children of this ancestor.
          $tree = $tree[$key]['below'] ? $tree[$key]['below'] : array();
          $found_active_trail = TRUE;
          break;
        }
      }
      // If we don't find the ancestor, bail out.
      if (!$found_active_trail) {
        $tree = array();
        break;
      }
    }
  }

  $is_front_page = drupal_is_front_page();
  // Trim the upper levels down to the one desired.
  for ($i = 1; $i < $level; $i++) {
    $found_active_trail = FALSE;
    // Examine each element at this level for the active trail.
    foreach ($tree as $key => &$value) {
      // Also include the children of the front page.
      if ($tree[$key]['link']['in_active_trail'] || ($tree[$key]['link']['link_path'] == '<front>' && $is_front_page)) {
        // Get the title for the pruned tree.
        menu_block_set_title($tree[$key]['link']);
        // Prune the tree to the children of the item in the active trail.
        $tree = $tree[$key]['below'] ? $tree[$key]['below'] : array();
        $found_active_trail = TRUE;
        break;
      }
    }
    // If we don't find the active trail, the active item isn't in the tree we want.
    if (!$found_active_trail) {
      $tree = array();
      break;
    }
  }
}

/**
 * Prune a tree so that it begins at the active menu item.
 *
 * @param array $tree
 *   The menu tree to prune.
 * @param string $level
 *   The level which the tree will be pruned to: 'active' or 'child'.
 */
function menu_tree_prune_active_tree(array &$tree, $level) {
  do {
    $found_active_trail = FALSE;
    // Examine each element at this level for the active trail.
    foreach ($tree as $key => &$value) {
      if ($tree[$key]['link']['in_active_trail']) {
        $found_active_trail = TRUE;
        // If the active trail item has children, examine them.
        if ($tree[$key]['below']) {
          // If we are pruning to the active menu item's level, check if this
          // is the active menu item by checking its children.
          if ($level == 'active') {
            foreach ($tree[$key]['below'] as $child_key => &$value) {
              if ($tree[$key]['below'][$child_key]['link']['in_active_trail']) {
                // Get the title for the pruned tree.
                menu_block_set_title($tree[$key]['link']);
                $tree = $tree[$key]['below'];
                // Continue in the pruned tree.
                break 2;
              }
            }
            // If we've found the active item, we're done.
            break 2;
          }
          // Set the title for the pruned tree.
          menu_block_set_title($tree[$key]['link']);
          // If we are pruning to the children of the active menu item, just
          // prune the tree to the children of the item in the active trail.
          $tree = $tree[$key]['below'];
          // Continue in the pruned tree.
          break;
        }
        // If the active menu item has no children, we're done.
        else {
          if ($level == 'child') {
            $tree = array();
          }
          break 2;
        }
      }
    }
  } while ($found_active_trail);
}

/**
 * Prune a tree so it does not extend beyond the specified depth limit.
 *
 * @param array $tree
 *   The menu tree to prune.
 * @param int $depth_limit
 *   The maximum depth of the returned tree; must be a positive integer.
 */
function menu_tree_depth_trim(array &$tree, $depth_limit) {
  // Prevent invalid input from returning a trimmed tree.
  if ($depth_limit < 1) {
    return;
  }

  // Examine each element at this level to find any possible children.
  foreach ($tree as $key => &$value) {
    if ($tree[$key]['below']) {
      if ($depth_limit > 1) {
        menu_tree_depth_trim($tree[$key]['below'], $depth_limit-1);
      }
      else {
        // Remove the children items.
        $tree[$key]['below'] = FALSE;
      }
    }
    if ($depth_limit == 1 && $tree[$key]['link']['has_children']) {
      // Turn off the menu styling that shows there were children.
      $tree[$key]['link']['has_children'] = FALSE;
      $tree[$key]['link']['leaf_has_children'] = TRUE;
    }
  }
}

/**
 * Returns a renderable menu tree.
 *
 * This is a copy of menu_tree_output() with additional classes added to the
 * output.
 *
 * @param array $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 * @param array $config
 *
 * @return array
 *   The menu tree as a render array.
 */
function menu_block_tree_output(array &$tree, array $config = array()) {
  $build = array();
  $items = array();

  // Create context if no config was provided.
  if (empty($config)) {
    $config['delta'] = 0;
    // Grab any menu item to find the menu_name for this tree.
    $menu_item = current($tree);
    $config['menu_name'] = $menu_item['link']['menu_name'];
  }
  $hook_delta = str_replace('-', '_', $config['delta']);
  $hook_menu_name = str_replace('-', '_', $config['menu_name']);

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $key => &$value) {
    if ($tree[$key]['link']['access'] && !$tree[$key]['link']['hidden']) {
      $items[] = $tree[$key];
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  foreach ($items as $i => &$data) {
    $class = array();
    if ($i == 0) {
      $class[] = 'first';
    }
    if ($i == $num_items - 1) {
      $class[] = 'last';
    }
    // Set a class for the <li>-tag. Since $data['below'] may contain local
    // tasks, only set 'expanded' class if the link also has children within
    // the current menu.
    if ($data['link']['has_children'] && $data['below']) {
      $class[] = 'expanded';
    }
    elseif ($data['link']['has_children']) {
      $class[] = 'collapsed';
    }
    else {
      $class[] = 'leaf';
    }
    if (!empty($data['link']['leaf_has_children'])) {
      $class[] = 'has-children';
    }
    // Set a class if the link is in the active trail.
    if ($data['link']['in_active_trail']) {
      $class[] = 'active-trail';
      $data['link']['localized_options']['attributes']['class'][] = 'active-trail';
    }
    if ($data['link']['href'] == $_GET['q'] || ($data['link']['href'] == '<front>' && drupal_is_front_page())) {
      $class[] = 'active';
    }
    // Set a menu link ID class.
    $class[] = 'menu-mlid-' . $data['link']['mlid'];
    // Normally, l() compares the href of every link with $_GET['q'] and sets
    // the active class accordingly. But local tasks do not appear in menu
    // trees, so if the current path is a local task, and this link is its
    // tab root, then we have to set the class manually.
    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    // Allow menu-specific theme overrides.
    $element['#theme'] = array(
      'menu_link__menu_block__' . $hook_delta,
      'menu_link__menu_block__' . $hook_menu_name,
      'menu_link__menu_block',
      'menu_link__' . $hook_menu_name,
      'menu_link',
    );
    $element['#attributes']['class'] = $class;
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? menu_block_tree_output($data['below'], $config) : $data['below'];
    $element['#original_link'] = $data['link'];
    $element['#bid'] = array('module' => 'menu_block', 'delta' => $config['delta']);
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = array(
      'menu_tree__menu_block__' . $hook_delta,
      'menu_tree__menu_block__' . $hook_menu_name,
      'menu_tree__menu_block',
      'menu_tree__' . $hook_menu_name,
      'menu_tree',
    );
  }

  return $build;
}

/**
 * Implements hook_menu_block_get_menus() on behalf of book.module.
 */
function book_menu_block_get_menus() {
  $menus = array();
  foreach (book_get_books() as $book) {
    $menus[$book['menu_name']] = $book['title'];
  }
  return $menus;
}

/**
 * Implements hook_menu_block_get_sort_menus() on behalf of book.module.
 */
function book_menu_block_get_sort_menus() {
  return array(
    '/^book\-toc\-.+/' => t('Book navigation'),
  );
}


/**
 * Implements hook_menu_insert().
 */
function menu_block_menu_insert($menu) {
  if (!empty($menu['menu_block_menu_order'])) {
    menu_block_menu_order_set_menu($menu['menu_name'], TRUE);
  }
}

/**
 * Implements hook_menu_update().
 */
function menu_block_menu_update($menu) {
  if (isset($menu['menu_block_menu_order'])) {
    menu_block_menu_order_set_menu($menu['menu_name'], $menu['menu_block_menu_order']);
  }
}

/**
 * Implements hook_menu_delete().
 */
function menu_block_menu_delete($menu) {
  // If a menu is deleted, we need to search all enabled layouts to see if any 
  // Menu Block was using that menu.
  // @todo: an alternative is simply dont display the block and set a message
  // that the menu is missing to allow the user to simply change the menu.
  $all_layouts = layout_get_all_configs('layout');
  foreach($all_layouts as $layout_name => $active_layouts) {
    foreach($active_layouts['content'] as $uuid => $block) {
      if($block['data']['module'] == 'menu_block') {
        if($block['data']['settings']['block_settings']['menu_name'] == $menu['menu_name']) {
          menu_block_delete($settings, $layout_name, $uuid);
        }
      }
    }
  }

  menu_block_menu_order_set_menu($menu['menu_name'], FALSE);
}

/**
 * Delete a menu block.
 *
 * @param string $delta
 *   The delta of the menu block.
 */
function menu_block_delete($settings, $layout_name, $uuid) {
  $config = config('layout.layout.' . $layout_name);
  $config->clear('content.' . $uuid);
  $config->save();
  cache_flush('layout_path');
  
  // This is probably unnecessary. Brought over from D7 version where it was
  // called to do database deletion of blocks. 
  // Keeping in case anyone had actually used this hook for something else.
  module_invoke_all('menu_block_delete', $settings);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_block_form_menu_edit_menu_alter(&$form, &$form_state) {
  $menus = config_get('menu_block.settings', 'menu_block_menu_order');
  $form['menu_block_menu_order'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include this menu in the <em>"the menu selected by the page"</em> menu available to menu blocks.'),
    '#default_value' => isset($menus[$form['old_name']['#value']]),
  );
}

/**
 * Add or remove a menu from the menu_block_menu_order variable.
 *
 * @param string $menu_name
 *   A menu machine name.
 * @param mixed $status
 *   If $status evaluates to TRUE, the menu will be added. If $status evaluates
 *   to FALSE, the menu will be removed.
 */
function menu_block_menu_order_set_menu($menu_name, $status) {
  $config = config('menu_block.settings');
  $menus = $config->get('menu_block_menu_order');
  if ($status && !isset($menus[$menu_name])) {
    $menus[$menu_name] = '';
    $config->set('menu_block_menu_order', $menus);
  }
  elseif (!$status && isset($menus[$menu_name])) {
    unset($menus[$menu_name]);
    $config->set('menu_block_menu_order', $menus);
  }
  $config->save();
}

/**
 * Validates the follow element of the block configuration form.
 */
function menu_block_configure_form_follow_validate($element, &$form_state) {
  //dpm($form_state);
  // The value of "follow" stored in the database/config array is either FALSE
  // or the value of the "follow_parent" form element.
  if ($form_state['values']['block_settings']['follow'] && !empty($form_state['values']['block_settings']['follow_parent'])) {
    $form_state['values']['block_settings']['follow'] = $form_state['values']['block_settings']['follow_parent'];
  }
}


/**
 * Validates the parent element of the block configuration form.
 */
function menu_block_configure_form_parent_validate($element, &$form_state) {
  // Determine the fixed parent item's menu and mlid.
  list($menu_name, $parent_mlid) = explode(':', $form_state['values']['block_settings']['parent']);
  $form_state['values']['block_settings']['parent_mlid'] = (int) $parent_mlid;

  if ($parent_mlid) {
    // If mlid is set, its menu overrides the menu_name option.
    $form_state['values']['block_settings']['menu_name'] = $menu_name;
  }
}

